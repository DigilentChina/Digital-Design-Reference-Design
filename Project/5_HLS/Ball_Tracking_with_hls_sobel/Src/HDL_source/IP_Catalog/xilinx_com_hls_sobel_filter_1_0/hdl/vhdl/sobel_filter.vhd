-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sobel_filter is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    inter_pix_V_address0 : OUT STD_LOGIC_VECTOR (20 downto 0);
    inter_pix_V_ce0 : OUT STD_LOGIC;
    inter_pix_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    out_pix_V_address0 : OUT STD_LOGIC_VECTOR (20 downto 0);
    out_pix_V_ce0 : OUT STD_LOGIC;
    out_pix_V_we0 : OUT STD_LOGIC;
    out_pix_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    rows : IN STD_LOGIC_VECTOR (31 downto 0);
    cols : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of sobel_filter is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sobel_filter,hls_ip_2015_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7a35tcpg236-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=17.760000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=1,HLS_SYN_FF=261,HLS_SYN_LUT=509}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_pp0_stg0_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_true : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv22_3FFFFF : STD_LOGIC_VECTOR (21 downto 0) := "1111111111111111111111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv13_19 : STD_LOGIC_VECTOR (12 downto 0) := "0000000011001";
    constant ap_const_lv9_80 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_const_lv8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";

    signal ColIndex_assign_reg_175 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_ColIndex_assign_reg_175_pp0_it1 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_pp0_stg0_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_34 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppstg_ColIndex_assign_reg_175_pp0_it2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_53 : BOOLEAN;
    signal tmp_fu_187_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_514 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_193_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_519 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_68 : BOOLEAN;
    signal row_1_fu_208_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal row_1_reg_528 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_3_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_533 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_243_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_13_reg_538 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_5_fu_249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_543 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_285_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_17_reg_548 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_8_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_553 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_fu_300_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal col_reg_557 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_9_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_562 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_reg_562_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_9_reg_562_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_566 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_566_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_11_reg_566_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_361_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_584 : STD_LOGIC_VECTOR (63 downto 0);
    signal buff_A_M_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal buff_A_M_0_ce0 : STD_LOGIC;
    signal buff_A_M_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_A_M_0_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal buff_A_M_0_ce1 : STD_LOGIC;
    signal buff_A_M_0_we1 : STD_LOGIC;
    signal buff_A_M_0_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal buff_A_M_1_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal buff_A_M_1_ce0 : STD_LOGIC;
    signal buff_A_M_1_we0 : STD_LOGIC;
    signal buff_A_M_1_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal row_reg_164 : STD_LOGIC_VECTOR (30 downto 0);
    signal ColIndex_assign_phi_fu_179_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_20_cast_fu_325_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_cast_fu_356_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_366_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal row_cast_fu_199_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_219_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_7_fu_231_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl2_cast_fu_223_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_shl3_cast_fu_235_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_6_fu_255_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_261_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_16_fu_273_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl_cast_fu_265_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_shl1_cast_fu_277_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal ColIndex_assign_cast_fu_291_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_316_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_19_fu_320_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_15_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_341_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_22_fu_345_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_23_fu_351_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_20_fu_385_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl1_i_fu_395_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl2_i_fu_407_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_3_fu_375_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_i_fu_423_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_fu_371_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_26_i_fu_439_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl2_i_cast_fu_415_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl1_i_cast_fu_403_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp2_fu_445_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp2_cast_fu_451_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl_i_cast_fu_431_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_23_i_cast5_fu_419_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp4_fu_461_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp4_cast_fu_467_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_26_i_fu_439_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp3_fu_471_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp3_cast_fu_477_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_fu_455_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_29_i_fu_481_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_31_i_fu_487_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_26_i_fu_439_p10 : STD_LOGIC_VECTOR (12 downto 0);

    component sobel_filter_buff_A_M_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sobel_filter_buff_A_M_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    buff_A_M_0_U : component sobel_filter_buff_A_M_0
    generic map (
        DataWidth => 8,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buff_A_M_0_address0,
        ce0 => buff_A_M_0_ce0,
        q0 => buff_A_M_0_q0,
        address1 => buff_A_M_0_address1,
        ce1 => buff_A_M_0_ce1,
        we1 => buff_A_M_0_we1,
        d1 => buff_A_M_0_d1);

    buff_A_M_1_U : component sobel_filter_buff_A_M_1
    generic map (
        DataWidth => 8,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buff_A_M_1_address0,
        ce0 => buff_A_M_1_ce0,
        we0 => buff_A_M_1_we0,
        d0 => buff_A_M_1_d0);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_lv1_0 = tmp_8_fu_295_p2))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_2_fu_203_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not((ap_const_lv1_0 = tmp_8_fu_295_p2)))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_2_fu_203_p2 = ap_const_lv1_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_lv1_0 = tmp_8_fu_295_p2)))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
            end if;
        end if;
    end process;


    -- ColIndex_assign_reg_175 assign process. --
    ColIndex_assign_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_const_lv1_0 = tmp_8_reg_553)))) then 
                ColIndex_assign_reg_175 <= col_reg_557;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_2_fu_203_p2 = ap_const_lv1_0)))) then 
                ColIndex_assign_reg_175 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    -- row_reg_164 assign process. --
    row_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_lv1_0 = tmp_8_fu_295_p2))) then 
                row_reg_164 <= row_1_reg_528;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
                row_reg_164 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2)) then
                ap_reg_ppstg_ColIndex_assign_reg_175_pp0_it1 <= ColIndex_assign_reg_175;
                ap_reg_ppstg_tmp_11_reg_566_pp0_it1 <= tmp_11_reg_566;
                ap_reg_ppstg_tmp_9_reg_562_pp0_it1 <= tmp_9_reg_562;
                tmp_8_reg_553 <= tmp_8_fu_295_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_true = ap_true)) then
                ap_reg_ppstg_ColIndex_assign_reg_175_pp0_it2 <= ap_reg_ppstg_ColIndex_assign_reg_175_pp0_it1;
                ap_reg_ppstg_tmp_11_reg_566_pp0_it2 <= ap_reg_ppstg_tmp_11_reg_566_pp0_it1;
                ap_reg_ppstg_tmp_9_reg_562_pp0_it2 <= ap_reg_ppstg_tmp_9_reg_562_pp0_it1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then
                col_reg_557 <= col_fu_300_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                row_1_reg_528 <= row_1_fu_208_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and not((ap_const_lv1_0 = tmp_8_fu_295_p2)))) then
                tmp_11_reg_566 <= tmp_11_fu_311_p2;
                tmp_9_reg_562 <= tmp_9_fu_306_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_2_fu_203_p2 = ap_const_lv1_0)))) then
                    tmp_13_reg_538(21 downto 7) <= tmp_13_fu_243_p2(21 downto 7);
                    tmp_17_reg_548(21 downto 7) <= tmp_17_fu_285_p2(21 downto 7);
                tmp_3_reg_533 <= tmp_3_fu_214_p2;
                tmp_5_reg_543 <= tmp_5_fu_249_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then
                tmp_1_reg_519 <= tmp_1_fu_193_p2;
                tmp_reg_514 <= tmp_fu_187_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not((ap_const_lv1_0 = ap_reg_ppstg_tmp_9_reg_562_pp0_it1))) then
                    tmp_s_reg_584(30 downto 0) <= tmp_s_fu_361_p1(30 downto 0);
            end if;
        end if;
    end process;
    tmp_13_reg_538(6 downto 0) <= "0000000";
    tmp_17_reg_548(6 downto 0) <= "0000000";
    tmp_s_reg_584(63 downto 31) <= "000000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_reg_ppiten_pp0_it3, tmp_2_fu_203_p2, tmp_8_fu_295_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when ap_ST_st2_fsm_1 => 
                if ((tmp_2_fu_203_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                end if;
            when ap_ST_pp0_stg0_fsm_2 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_lv1_0 = tmp_8_fu_295_p2) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_2;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_lv1_0 = tmp_8_fu_295_p2) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ColIndex_assign_cast_fu_291_p1 <= std_logic_vector(resize(unsigned(ColIndex_assign_phi_fu_179_p4),32));

    -- ColIndex_assign_phi_fu_179_p4 assign process. --
    ColIndex_assign_phi_fu_179_p4_assign_proc : process(ColIndex_assign_reg_175, ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_reg_ppiten_pp0_it1, tmp_8_reg_553, col_reg_557)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_const_lv1_0 = tmp_8_reg_553)))) then 
            ColIndex_assign_phi_fu_179_p4 <= col_reg_557;
        else 
            ColIndex_assign_phi_fu_179_p4 <= ColIndex_assign_reg_175;
        end if; 
    end process;


    -- ap_sig_bdd_34 assign process. --
    ap_sig_bdd_34_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_34 <= (ap_CS_fsm(2 downto 2) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_53 assign process. --
    ap_sig_bdd_53_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_53 <= (ap_const_lv1_1 = ap_CS_fsm(0 downto 0));
    end process;


    -- ap_sig_bdd_68 assign process. --
    ap_sig_bdd_68_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_68 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_2 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_2_assign_proc : process(ap_sig_bdd_34)
    begin
        if (ap_sig_bdd_34) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_53)
    begin
        if (ap_sig_bdd_53) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_68)
    begin
        if (ap_sig_bdd_68) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;

    buff_A_M_0_address0 <= tmp_s_fu_361_p1(11 - 1 downto 0);
    buff_A_M_0_address1 <= tmp_12_fu_366_p1(11 - 1 downto 0);

    -- buff_A_M_0_ce0 assign process. --
    buff_A_M_0_ce0_assign_proc : process(ap_reg_ppiten_pp0_it2)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) then 
            buff_A_M_0_ce0 <= ap_const_logic_1;
        else 
            buff_A_M_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- buff_A_M_0_ce1 assign process. --
    buff_A_M_0_ce1_assign_proc : process(ap_reg_ppiten_pp0_it3)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) then 
            buff_A_M_0_ce1 <= ap_const_logic_1;
        else 
            buff_A_M_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buff_A_M_0_d1 <= std_logic_vector(unsigned(ap_const_lv8_10) + unsigned(tmp_31_i_fu_487_p4));

    -- buff_A_M_0_we1 assign process. --
    buff_A_M_0_we1_assign_proc : process(ap_reg_ppiten_pp0_it3, ap_reg_ppstg_tmp_11_reg_566_pp0_it2)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_11_reg_566_pp0_it2))))) then 
            buff_A_M_0_we1 <= ap_const_logic_1;
        else 
            buff_A_M_0_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buff_A_M_1_address0 <= tmp_s_reg_584(11 - 1 downto 0);

    -- buff_A_M_1_ce0 assign process. --
    buff_A_M_1_ce0_assign_proc : process(ap_reg_ppiten_pp0_it3)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) then 
            buff_A_M_1_ce0 <= ap_const_logic_1;
        else 
            buff_A_M_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buff_A_M_1_d0 <= buff_A_M_0_q0;

    -- buff_A_M_1_we0 assign process. --
    buff_A_M_1_we0_assign_proc : process(ap_reg_ppiten_pp0_it3, ap_reg_ppstg_tmp_9_reg_562_pp0_it2)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_9_reg_562_pp0_it2))))) then 
            buff_A_M_1_we0 <= ap_const_logic_1;
        else 
            buff_A_M_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    col_fu_300_p2 <= std_logic_vector(unsigned(ColIndex_assign_phi_fu_179_p4) + unsigned(ap_const_lv31_1));
    inter_pix_V_address0 <= tmp_20_cast_fu_325_p1(21 - 1 downto 0);

    -- inter_pix_V_ce0 assign process. --
    inter_pix_V_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_reg_ppiten_pp0_it3)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) or (ap_const_logic_1 = ap_reg_ppiten_pp0_it3) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then 
            inter_pix_V_ce0 <= ap_const_logic_1;
        else 
            inter_pix_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_cond_fu_336_p2 <= (tmp_5_reg_543 and tmp_15_fu_330_p2);
    out_pix_V_address0 <= tmp_24_cast_fu_356_p1(21 - 1 downto 0);

    -- out_pix_V_ce0 assign process. --
    out_pix_V_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then 
            out_pix_V_ce0 <= ap_const_logic_1;
        else 
            out_pix_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_pix_V_d0 <= ap_const_lv24_0;

    -- out_pix_V_we0 assign process. --
    out_pix_V_we0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_2, ap_reg_ppiten_pp0_it0, tmp_8_fu_295_p2, or_cond_fu_336_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = tmp_8_fu_295_p2)) and not((ap_const_lv1_0 = or_cond_fu_336_p2))))) then 
            out_pix_V_we0 <= ap_const_logic_1;
        else 
            out_pix_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_Val2_3_fu_375_p4 <= inter_pix_V_q0(15 downto 8);
    p_shl1_cast_fu_277_p3 <= (tmp_16_fu_273_p1 & ap_const_lv7_0);
    p_shl1_i_cast_fu_403_p1 <= std_logic_vector(resize(unsigned(p_shl1_i_fu_395_p3),15));
    p_shl1_i_fu_395_p3 <= (tmp_20_fu_385_p4 & ap_const_lv6_0);
    p_shl2_cast_fu_223_p3 <= (tmp_4_fu_219_p1 & ap_const_lv11_0);
    p_shl2_i_cast_fu_415_p1 <= std_logic_vector(resize(unsigned(p_shl2_i_fu_407_p3),15));
    p_shl2_i_fu_407_p3 <= (tmp_20_fu_385_p4 & ap_const_lv1_0);
    p_shl3_cast_fu_235_p3 <= (tmp_7_fu_231_p1 & ap_const_lv7_0);
    p_shl_cast_fu_265_p3 <= (tmp_14_fu_261_p1 & ap_const_lv11_0);
    p_shl_i_cast_fu_431_p1 <= std_logic_vector(resize(unsigned(p_shl_i_fu_423_p3),16));
    p_shl_i_fu_423_p3 <= (p_Val2_3_fu_375_p4 & ap_const_lv7_0);
    r_V_fu_371_p1 <= inter_pix_V_q0(8 - 1 downto 0);
    row_1_fu_208_p2 <= std_logic_vector(unsigned(row_reg_164) + unsigned(ap_const_lv31_1));
    row_cast_fu_199_p1 <= std_logic_vector(resize(unsigned(row_reg_164),32));
    tmp1_fu_455_p2 <= std_logic_vector(unsigned(tmp2_cast_fu_451_p1) + unsigned(p_shl_i_cast_fu_431_p1));
    tmp2_cast_fu_451_p1 <= std_logic_vector(resize(unsigned(tmp2_fu_445_p2),16));
    tmp2_fu_445_p2 <= std_logic_vector(unsigned(p_shl2_i_cast_fu_415_p1) + unsigned(p_shl1_i_cast_fu_403_p1));
    tmp3_cast_fu_477_p1 <= std_logic_vector(resize(unsigned(tmp3_fu_471_p2),16));
    tmp3_fu_471_p2 <= std_logic_vector(unsigned(tmp4_cast_fu_467_p1) + unsigned(tmp_26_i_fu_439_p2));
    tmp4_cast_fu_467_p1 <= std_logic_vector(resize(unsigned(tmp4_fu_461_p2),13));
    tmp4_fu_461_p2 <= std_logic_vector(unsigned(ap_const_lv9_80) + unsigned(tmp_23_i_cast5_fu_419_p1));
    tmp_11_fu_311_p2 <= (tmp_9_fu_306_p2 and tmp_3_reg_533);
    tmp_12_fu_366_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_ColIndex_assign_reg_175_pp0_it2),64));
    tmp_13_fu_243_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_223_p3) - unsigned(p_shl3_cast_fu_235_p3));
    tmp_14_fu_261_p1 <= tmp_6_fu_255_p2(11 - 1 downto 0);
    tmp_15_fu_330_p2 <= "0" when (ColIndex_assign_phi_fu_179_p4 = ap_const_lv31_0) else "1";
    tmp_16_fu_273_p1 <= tmp_6_fu_255_p2(15 - 1 downto 0);
    tmp_17_fu_285_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_265_p3) - unsigned(p_shl1_cast_fu_277_p3));
    tmp_18_fu_316_p1 <= ColIndex_assign_phi_fu_179_p4(22 - 1 downto 0);
    tmp_19_fu_320_p2 <= std_logic_vector(unsigned(tmp_18_fu_316_p1) + unsigned(tmp_13_reg_538));
    tmp_1_fu_193_p2 <= std_logic_vector(unsigned(cols) + unsigned(ap_const_lv32_1));
        tmp_20_cast_fu_325_p1 <= std_logic_vector(resize(signed(tmp_19_fu_320_p2),64));

    tmp_20_fu_385_p4 <= inter_pix_V_q0(23 downto 16);
    tmp_21_fu_341_p1 <= ColIndex_assign_phi_fu_179_p4(22 - 1 downto 0);
    tmp_22_fu_345_p2 <= std_logic_vector(signed(ap_const_lv22_3FFFFF) + signed(tmp_21_fu_341_p1));
    tmp_23_fu_351_p2 <= std_logic_vector(unsigned(tmp_17_reg_548) + unsigned(tmp_22_fu_345_p2));
    tmp_23_i_cast5_fu_419_p1 <= std_logic_vector(resize(unsigned(p_Val2_3_fu_375_p4),9));
        tmp_24_cast_fu_356_p1 <= std_logic_vector(resize(signed(tmp_23_fu_351_p2),64));

    tmp_26_i_fu_439_p1 <= tmp_26_i_fu_439_p10(8 - 1 downto 0);
    tmp_26_i_fu_439_p10 <= std_logic_vector(resize(unsigned(r_V_fu_371_p1),13));
    tmp_26_i_fu_439_p2 <= std_logic_vector(resize(unsigned(ap_const_lv13_19) * unsigned(tmp_26_i_fu_439_p1), 13));
    tmp_29_i_fu_481_p2 <= std_logic_vector(unsigned(tmp3_cast_fu_477_p1) + unsigned(tmp1_fu_455_p2));
    tmp_2_fu_203_p2 <= "1" when (signed(row_cast_fu_199_p1) < signed(tmp_reg_514)) else "0";
    tmp_31_i_fu_487_p4 <= tmp_29_i_fu_481_p2(15 downto 8);
    tmp_3_fu_214_p2 <= "1" when (signed(row_cast_fu_199_p1) < signed(rows)) else "0";
    tmp_4_fu_219_p1 <= row_reg_164(11 - 1 downto 0);
    tmp_5_fu_249_p2 <= "0" when (row_reg_164 = ap_const_lv31_0) else "1";
    tmp_6_fu_255_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(row_cast_fu_199_p1));
    tmp_7_fu_231_p1 <= row_reg_164(15 - 1 downto 0);
    tmp_8_fu_295_p2 <= "1" when (signed(ColIndex_assign_cast_fu_291_p1) < signed(tmp_1_reg_519)) else "0";
    tmp_9_fu_306_p2 <= "1" when (signed(ColIndex_assign_cast_fu_291_p1) < signed(cols)) else "0";
    tmp_fu_187_p2 <= std_logic_vector(unsigned(rows) + unsigned(ap_const_lv32_1));
    tmp_s_fu_361_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_ColIndex_assign_reg_175_pp0_it1),64));
end behav;
